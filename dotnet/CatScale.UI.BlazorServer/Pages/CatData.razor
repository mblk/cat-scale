@page "/cats/{Id:int}"

@inject ICatScaleService CatScaleService

<h3>Katze</h3>

@if (_cat is null || _weights is null)
{
    <p>Loading ...</p>
}
else
{
    <hr/>
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>Stammdaten:</div>

        <AuthorizeView>
            <Authorized>
                <div class="btn-group btn-group-sm">
                    @if (_editMode)
                    {
                        <button class="btn btn-sm btn-secondary" @onclick="@DiscardChanges">Verwerfen</button>
                        <button class="btn btn-sm btn-primary" @onclick="@SaveChanges">Speichern</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" @onclick="@Edit">Bearbeiten</button>
                    }
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="d-inline-flex w-50">
        <table class="table table-bordered table-hover m-0 align-middle">
            <tbody>
            <tr>
                <td class="col-3">Id</td>
                <td class="col-3">@_cat.Id</td>
            </tr>
            <tr>
                <td class="col-3">Typ</td>
                <td>
                    @if (_editMode)
                    {
                        <InputSelect @bind-Value="@_editType" class="form-control dropdown-toggle">
                            @foreach (var catType in Enum.GetValues<CatTypeDto>())
                            {
                                <option value="@catType.ToString()">@catType.ToString()</option>
                            }
                        </InputSelect>
                    }
                    else
                    {
                        @_cat.Type
                    }
                </td>
            </tr>
            <tr>
                <td>Name</td>
                <td>
                    @if (_editMode)
                    {
                        <input type="text" class="form-control" id="name-input" placeholder="Name" @bind-value="_editName">
                    }
                    else
                    {
                        @_cat.Name
                    }
                </td>
            </tr>
            <tr>
                <td>Rasse</td>
                <td>asdasd</td>
            </tr>
            <tr>
                <td>Geburtstag</td>
                <td>
                    @if (_editMode)
                    {
                        <input type="date" class="form-control" id="dob-input" placeholder="Geburtstag" @bind-value="_editDateOfBirth">
                    }
                    else
                    {
                        @_cat.DateOfBirth
                    }
                </td>
            </tr>
            <tr>
                <td>Alter</td>
                <td>
                    @if (_editMode)
                    {
                        @CalculateAge(_editDateOfBirth)
                    }
                    else
                    {
                        @CalculateAge(_cat.DateOfBirth)
                    }
                </td>
            </tr>
            <tr>
                <td>Bild</td>
                <td>asdasd</td>
            </tr>
            </tbody>
        </table>
    </div>

    <hr/>
    <p>Gewicht:</p>

    <AuthorizeView>
        <Authorized>
            <div class="d-inline-flex">
                <input type="text" class="form-control" style="width: 100px" id="new-weight-input" placeholder="Gewicht" @bind-value="_newWeightValue">
                <button class="btn btn-primary" @onclick="@AddWeight">+</button>
            </div>
            <br/>
            <br/>
        </Authorized>
    </AuthorizeView>

    <table class="table align-middle">
        <thead>
        <tr>
            <th>Id</th>
            <th>Zeitpunkt</th>
            <th>Gewicht</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var weight in _weights.OrderByDescending(w => w.Timestamp))
        {
            <tr>
                <td>@weight.Id</td>
                <td>@TimestampFormatter.Format(weight.Timestamp)</td>
                <td>@weight.Weight g</td>
                <td>
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteWeight(weight))">LÃ¶schen</button>
                        </Authorized>
                    </AuthorizeView>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private CatDto? _cat;
    private CatWeightDto[]? _weights;

    private bool _editMode;
    private CatTypeDto _editType;
    private string? _editName;
    private DateOnly _editDateOfBirth;

    private double _newWeightValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _cat = null;
            _weights = null;
            _editMode = false;

            _cat = await CatScaleService.GetCat(Id);
            _weights = await CatScaleService.GetCatWeights(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }

    private void Edit()
    {
        if (_cat is null) return;

        _editMode = true;
        _editType = _cat.Type;
        _editName = _cat.Name;
        _editDateOfBirth = _cat.DateOfBirth;
    }

    private async Task SaveChanges()
    {
        if (_cat is null ||
            String.IsNullOrWhiteSpace(_editName) ||
            _editDateOfBirth < new DateOnly(1950, 1, 1) ||
            _editDateOfBirth.ToDateTime(TimeOnly.MinValue) > DateTime.Now)
            return;

        await CatScaleService.UpdateCat(_cat.Id, _editType, _editName, _editDateOfBirth);
        await LoadData();
    }

    private void DiscardChanges()
    {
        _editMode = false;
    }

    private async Task DeleteWeight(CatWeightDto weight)
    {
        await CatScaleService.DeleteCatWeight(weight.Id);
        await LoadData();
    }

    private async Task AddWeight()
    {
        if (_cat is null) return;

        await CatScaleService.CreateCatWeight(_cat.Id, DateTimeOffset.Now, _newWeightValue);
        await LoadData();
    }

    private static int CalculateAge(DateOnly dateOfBirth)
    {
        var dob = dateOfBirth;
        var today = DateOnly.FromDateTime(DateTime.Today);
        var age = today.Year - dob.Year;
        if (dob > today.AddYears(-age))
        {
            age--;
        }
        return age;
    }

}