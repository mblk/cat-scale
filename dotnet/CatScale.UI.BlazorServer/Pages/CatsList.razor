@page "/cats"

@inject ICatScaleService CatScaleService
@inject NavigationManager NavigationManager

<h3>Katzen</h3>

@if (_cats == null)
{
    <p>Loading ...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="btn-group btn-group-sm">
                <button class="btn btn-sm btn-secondary" @onclick="@LoadData">Liste aktualisieren</button>
                <button class="btn btn-sm btn-primary" @onclick="@CreateCat">Neue Katze anlegen</button>
            </div>
            <br/>
            <br/>
        </Authorized>
    </AuthorizeView>

    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Typ</th>
            <th>Name</th>
            <th>Geburtstag</th>
            <th>Alter</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cat in _cats)
        {
            <tr>
                <td>@cat.Id</td>
                <td>@cat.Type</td>
                <td>@cat.Name</td>
                <td>@cat.DateOfBirth</td>
                <td>@CalculateAge(cat)</td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-sm btn-primary" @onclick="@(() => Open(cat))">Details</button>
                        <AuthorizeView>
                            <Authorized>
                                <button class="btn btn-sm btn-danger" @onclick="@(() => Delete(cat))">LÃ¶schen</button>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private CatDto[]? _cats;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _cats = await CatScaleService.GetAllCats();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task CreateCat()
    {
        await CatScaleService.CreateCat(CatTypeDto.Active,$"Testcat-{Random.Shared.Next() % 1000}", new DateOnly(2023, 1, 1));
        await LoadData();
    }

    private void Open(CatDto cat)
    {
        NavigationManager.NavigateTo($"cats/{cat.Id}");
    }

    private async Task Delete(CatDto cat)
    {
        await CatScaleService.DeleteCat(cat.Id);
        await LoadData();
    }

    // TODO move to utils?
    private static int CalculateAge(CatDto cat)
    {
        var dob = cat.DateOfBirth;
        var today = DateOnly.FromDateTime(DateTime.Today);
        var age = today.Year - dob.Year;
        if (dob > today.AddYears(-age))
        {
            age--;
        }
        return age;
    }

}