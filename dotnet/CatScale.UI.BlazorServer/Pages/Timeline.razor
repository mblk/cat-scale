@page "/Timeline"

@inject ICatScaleService CatScaleService

<h3>Timeline</h3>

@if (_scaleEventViewModels is null || _cats is null)
{
    <p>Loading ...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-sm btn-danger" @onclick="@DeleteAllClassifications">Alle Klassifikationen löschen</button>
            <button class="btn btn-sm btn-danger" @onclick="@ClassifyAllScaleEvents">Alle Ereignisse neu klassifizieren</button>
            <br />
            <br />
        </Authorized>
    </AuthorizeView>
    
    <div class="accordion">
        @foreach (var vm in _scaleEventViewModels)
        {
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button ps-1 pt-1 pb-1 @(vm.Expanded ? "show" : "collapsed")" type="button"
                            @onclick="@(() => { vm.Expanded = !vm.Expanded; })">
                        
                        <div class="alert alert-primary m-0 p-2" role="alert">
                            @TimestampFormatter.Format(vm.ScaleEvent.Start)
                        </div>

                        @{
                            var unknown = true;
                            if (vm.ScaleEvent.Cleaning != null)
                            {
                                unknown = false;
                                <div class="alert alert-info m-0 p-2 ms-1" role="alert">
                                    Reinigung
                                    (@vm.ScaleEvent.Cleaning.Time.ToString("F0")s,
                                    @vm.ScaleEvent.Cleaning.Weight.ToString("F0")g)
                                </div>
                            }
                            if (vm.ScaleEvent.Measurement != null)
                            {
                                unknown = false;
                                <div class="alert alert-success m-0 p-2 ms-1" role="alert">
                                    Messung
                                    (@_cats.Single(c => c.Id == vm.ScaleEvent.Measurement.CatId).Name,
                                    @vm.ScaleEvent.Measurement.CatWeight.ToString("F0")g)
                                </div>
                            }
                            if (unknown)
                            {
                                <div class="alert alert-warning m-0 p-2 ms-1" role="alert">
                                    Unbekanntes Ereignis
                                    (@((vm.ScaleEvent.End - vm.ScaleEvent.Start).TotalSeconds.ToString("F0"))s,
                                    @vm.ScaleEvent.StablePhases.Length)
                                </div>
                            }
                        }
                    </button>
                </h2>
                <div class="accordion-collapse collapse @(vm.Expanded ? "show" : "")">
                    @if (vm.Expanded)
                    {
                        <div class="accordion-body">
                            <strong>Details:</strong><br/>
                            Start: @TimestampFormatter.Format(vm.ScaleEvent.Start)<br/>
                            Ende: @TimestampFormatter.Format(vm.ScaleEvent.End)<br/>
                            Dauer: @((vm.ScaleEvent.End - vm.ScaleEvent.Start).TotalSeconds.ToString("F0"))s<br/>
                            Katzenklo: @vm.ScaleEvent.ToiletId<br />
                            
                            @if (vm.ScaleEvent.Cleaning is null)
                            {
                                <div>Keine Reinigung</div>
                            }
                            else
                            {
                                <div class="ms-4">
                                    <strong>Reinigung</strong>
                                    (Id: @vm.ScaleEvent.Cleaning.Id)<br/>
                                    Zeitpunkt: @TimestampFormatter.Format(vm.ScaleEvent.Cleaning.Timestamp)<br/>
                                    Dauer: @vm.ScaleEvent.Cleaning.Time.ToString("F0")s<br/>
                                    Gewicht: @vm.ScaleEvent.Cleaning.Weight.ToString("F0")g<br/>
                                </div>
                            }
                            
                            @if (vm.ScaleEvent.Measurement is null)
                            {
                                <div>Keine Messung</div>
                            }
                            else
                            {
                                <div class="ms-4">
                                    <strong>Messung</strong>
                                    (Id: @vm.ScaleEvent.Measurement.Id)<br/>
                                    Katze: @vm.ScaleEvent.Measurement.CatId<br />
                                    Zeitpunkt: @TimestampFormatter.Format(vm.ScaleEvent.Measurement.Timestamp)<br/>
                                    Setup: @vm.ScaleEvent.Measurement.SetupTime.ToString("F0")s<br/>
                                    Poo: @vm.ScaleEvent.Measurement.PooTime.ToString("F0")s<br/>
                                    Cleanup: @vm.ScaleEvent.Measurement.CleanupTime.ToString("F0")s<br/>
                                    Cat: @vm.ScaleEvent.Measurement.CatWeight.ToString("F0")g<br/>
                                    Poo: @vm.ScaleEvent.Measurement.PooWeight.ToString("F0")g<br/>
                                </div>
                            }
                            
                            <br/>
                            <strong>Stabile Phasen: @vm.ScaleEvent.StablePhases.Length</strong><br/>
                            <table class="table table-bordered">
                                <thead>
                                <tr>
                                    <th scope="col">Ende</th>
                                    <th scope="col">Länge</th>
                                    <th scope="col">Wert</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var sp in vm.ScaleEvent.StablePhases.OrderBy(x => x.Time))
                                {
                                    <tr>
                                        <td>@sp.Time.DateTime.ToLongTimeString()</td>
                                        <td>@sp.Length.ToString("F1") s</td>
                                        <td>@sp.Value.ToString("F1") g</td>
                                    </tr>
                                }
                                </tbody>
                            </table>

                            <img src="@CatScaleService.GetScaleEventGraphUri(vm.ScaleEvent.Id)" style="max-width: 100%" alt="Grafik kann nicht geladen werden"/>
                            <br/>
                            
                            <AuthorizeView>
                                <Authorized>
                                    <br />
                                    <div class="btn-group">
                                        <button class="btn btn-primary" @onclick="@(() => Classify(vm))">Klassifizieren</button>
                                        <button class="btn btn-danger" @onclick="@(() => Delete(vm))">Löschen</button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private CatDto[]? _cats;
    
    private ScaleEventDto[]? _scaleEvents;

    private ScaleEventViewModel[]? _scaleEventViewModels;

    internal class ScaleEventViewModel
    {
        public ScaleEventDto ScaleEvent { get; }
        public bool Expanded { get; set; }

        public ScaleEventViewModel(ScaleEventDto scaleEvent)
        {
            ScaleEvent = scaleEvent;
        }
    }

    private async Task DeleteAllClassifications()
    {
        await CatScaleService.DeleteAllScaleEventClassifications();
        await LoadData();
    }

    private async Task ClassifyAllScaleEvents()
    {
        await CatScaleService.ClassifyAllScaleEvents();
        await LoadData();
    }

    private async Task Delete(ScaleEventViewModel vm)
    {
        await CatScaleService.DeleteScaleEvent(vm.ScaleEvent.Id);
        await LoadData();
    }
    
    private async Task Classify(ScaleEventViewModel vm)
    {
        await CatScaleService.ClassifyScaleEvent(vm.ScaleEvent.Id);
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _cats = null;
            _scaleEvents = null;
            _scaleEventViewModels = null;

            await InvokeAsync(StateHasChanged);
            
            _cats = await CatScaleService.GetAllCats();
            
            _scaleEvents = await CatScaleService.GetScaleEvents();

            _scaleEventViewModels = _scaleEvents
                .OrderByDescending(x => x.Start)
                .Select(x => new ScaleEventViewModel(x))
                .ToArray();
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }
}